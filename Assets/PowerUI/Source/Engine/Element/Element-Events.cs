//--------------------------------------//               PowerUI////        For documentation or //    if you have any issues, visit//        powerUI.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------using System;using Dom;using Nitro;namespace PowerUI{		/// <summary>	/// Handles events attached to an element.	/// </summary>	public partial class HtmlElement{				/// <summary>Called when this element receives a keyup.</summary>		public KeyboardEventDelegate onkeyup{			get{				return GetFirstDelegate<KeyboardEventDelegate>("keyup");			}			set{				addEventListener("keyup",new KeyboardEventListener(value));			}		}				/// <summary>Called when this element receives a keydown.</summary>		public KeyboardEventDelegate onkeydown{			get{				return GetFirstDelegate<KeyboardEventDelegate>("keydown");			}			set{				addEventListener("keydown",new KeyboardEventListener(value));			}		}				/// <summary>Called when this element receives a mouseup.</summary>		public MouseEventDelegate onmouseup{			get{				return GetFirstDelegate<MouseEventDelegate>("mouseup");			}			set{				addEventListener("mouseup",new MouseEventListener(value));			}		}				/// <summary>Called when this element receives a mouseout.</summary>		public MouseEventDelegate onmouseout{			get{				return GetFirstDelegate<MouseEventDelegate>("mouseout");			}			set{				addEventListener("mouseout",new MouseEventListener(value));			}		}				/// <summary>Called when this element receives a mousedown.</summary>		public MouseEventDelegate onmousedown{			get{				return GetFirstDelegate<MouseEventDelegate>("mousedown");			}			set{				addEventListener("mousedown",new MouseEventListener(value));			}		}				/// <summary>Called when this element receives a mousemove. Note that it must be focused.</summary>		public MouseEventDelegate onmousemove{			get{				return GetFirstDelegate<MouseEventDelegate>("mousemove");			}			set{				addEventListener("mousemove",new MouseEventListener(value));			}		}				/// <summary>Called when this element receives a mouseover.</summary>		public MouseEventDelegate onmouseover{			get{				return GetFirstDelegate<MouseEventDelegate>("mouseover");			}			set{				addEventListener("mouseover",new MouseEventListener(value));			}		}				/// <summary>Called when this element receives a loaded event (e.g. iframe).</summary>		public DomEventDelegate onloadedevent{			get{				return GetFirstDelegate<DomEventDelegate>("loaded");			}			set{				addEventListener("loaded",new DomEventListener(value));			}		}				/// <summary>Called when this element gets focused.</summary>		public FocusEventDelegate onfocus{			get{				return GetFirstDelegate<FocusEventDelegate>("focus");			}			set{				addEventListener("focus",new FocusEventListener(value));			}		}				/// <summary>Called when this element is unfocused (blurred).</summary>		public FocusEventDelegate onblur{			get{				return GetFirstDelegate<FocusEventDelegate>("blur");			}			set{				addEventListener("blur",new FocusEventListener(value));			}		}				/// <summary>Called when this element receives a full click.</summary>		public MouseEventDelegate onclick{			get{				return GetFirstDelegate<MouseEventDelegate>("click");			}			set{				addEventListener("click",new MouseEventListener(value));			}		}			}	}